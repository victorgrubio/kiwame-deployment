version: '3'
networks:
  app-tier:
    driver: bridge
services:
  mongo:
    image: mongo:4.2
    ports:
      - '27778:27017'
    networks:
      - app-tier
    volumes:
      - ./db_dev:/data/db
  api:
    image: gatvdocker/kiwame:api-1.1.2
    build:
      context: apis/kiwameAPI
      dockerfile: Dockerfile
    environment:
      - WAIT_HOSTS=mongo:27017, kafka:9092
      - WAIT_AFTER_HOSTS=5
      - CONFIG_ENV=docker_prod
    volumes:
      - images_api:/usr/src/images
    ports:
      - "8090:8090"
    networks:
      - app-tier
    restart: always
  dashboard:
    image: gatvdocker/kiwame:dashboard-1.0.0
    build:
        context: dashboard
        dockerfile: Dockerfile
    environment:
      - API_ENV=production
      - API_URL=http://80.58.61.69
    ports:
      - "80:80"
    networks:
      - app-tier
    depends_on:
      - api
  cvm:
    image: tavitto16/kiwame_cvm_tid:latest
    build:
      context: cvm
    expose:
      - '5000'
    environment:
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=9092
      - KAFKA_TOPIC_CONSUMER=newFoodPicture
      - KAFKA_TOPIC_PRODUCER=ingredients
      - KAFKA_GROUP=group1
      - BROKER_HOST=http://kiwame_api_1
      - BROKER_PORT=8090
    networks:
      - app-tier
    depends_on:
      - api
    restart: always
  dam:
    image: gatvdocker/kiwame:dam-1.0.1
    build:
      context: data-analysis-module
      dockerfile: Dockerfile
    environment:
      - API_KEY_NAME=DAM
      - BASE_URL=kiwame_api_1:8090
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - KAFKA_TOPIC_CONSUMER=newMeasure
      - KAFKA_TOPIC_PRODUCER=recommendations
      - KAFKA_GROUP_ID=dam
    networks:
      - app-tier
    depends_on:
      - api
    restart: always
  zookeeper:
    image: bitnami/zookeeper:3.6.1
    expose:
      - '2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    tmpfs: "/datalog"
    networks:
      - app-tier
    restart: always
  kafka:
    image: bitnami/kafka:2.4.0
    expose:
      - '9092'
    ports:
      - '29092:29092'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://192.168.0.159:29092
    networks:
      - app-tier
    depends_on:
      - zookeeper
    restart: always
  kafdrop:
    image: obsidiandynamics/kafdrop:3.26.0
    restart: "no"
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
        - app-tier
volumes:
  images_api: